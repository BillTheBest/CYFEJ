package Modelos;
// Generated 09-06-2013 07:53:46 PM by Hibernate Tools 3.2.1.GA

import DAO.Despachos.Abogados.TipoAbogadosDAO;
import DAO.Despachos.Abogados.TipoAbogadosDAOimpl;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Tipoabogado generated by hbm2java
 */
@Entity
@Table(name="tipoabogado")
public class Tipoabogado  implements java.io.Serializable {

     private Long idTipoAbogado;
     private String descripcion;
     private List<AbogadoTipoabogado> ata = new ArrayList<AbogadoTipoabogado>();
     private TipoAbogadosDAO dao;
    

    public Tipoabogado() {
        dao = new TipoAbogadosDAOimpl();
    }

    public Tipoabogado(Long idTipoAbogado,String descripcion) {
        this.idTipoAbogado = idTipoAbogado;
        this.descripcion = descripcion;
    }
     
     @Id 
     @GeneratedValue(strategy=GenerationType.IDENTITY)
    @Column(name="idTipoAbogado", unique=true, nullable=false)
    public Long getIdTipoAbogado() {
        return idTipoAbogado;
    }
    
    public void setIdTipoAbogado(Long idTipoAbogado) {
        this.idTipoAbogado = idTipoAbogado;
    }
    
    @Column(name="descripcion", nullable=false, length=50)
    public String getDescripcion() {
        return descripcion;
    }
    
    public void setDescripcion(String descripcion) {
        this.descripcion = descripcion;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "id.tipoAbogado")

    public List<AbogadoTipoabogado> getAta() {
        return ata;
    }

    public void setAta(List<AbogadoTipoabogado> ata) {
        this.ata = ata;
    }
    
      public List<Tipoabogado> listaTipoabogados(){
        return dao.findAllTipoabogados();
    }

    public Tipoabogado findByID(Long id){
        return dao.findbyID(id);
    }
    


}


